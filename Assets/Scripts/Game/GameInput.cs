//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputReader/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""MapNavi"",
            ""id"": ""304cdaf5-725e-4c1e-b3fc-f591fc040b6e"",
            ""actions"": [
                {
                    ""name"": ""CursorMove"",
                    ""type"": ""Value"",
                    ""id"": ""5a3ae759-c95f-47e7-810e-1b96da3a0c31"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CursorConfirm"",
                    ""type"": ""Button"",
                    ""id"": ""b83c6c04-f197-4363-9a7b-959b7e24084d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorCancel"",
                    ""type"": ""Button"",
                    ""id"": ""25c4dfc7-07e5-48bf-8060-0418f2392a91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrows"",
                    ""id"": ""eb030a7a-ec9c-4290-b039-00cb9fd1c0c4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3defdebb-4962-431b-bda6-fb666031a129"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f387f271-337d-4160-b25b-f7155e208eb4"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6000d403-74c0-4247-b927-b79615c08138"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""01326e50-91cb-4c51-b446-fda028a8da9b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8f719736-aa4b-434a-af7c-1a12d1159fe7"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorConfirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b418510-dbad-43f0-9d65-024f7514f644"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorCancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuNavi"",
            ""id"": ""084934ca-5ac8-4944-83cf-d5a7ef977a2b"",
            ""actions"": [
                {
                    ""name"": ""PointerMove"",
                    ""type"": ""Value"",
                    ""id"": ""234c6d3e-0b5a-4767-a405-57ff51b9ec3c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerConfirm"",
                    ""type"": ""Button"",
                    ""id"": ""b46ab431-a252-49f8-8390-8670f98240de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerCancel"",
                    ""type"": ""Button"",
                    ""id"": ""0a1a935e-8a73-4ccd-a4d8-ff11ff7a4ee5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrows"",
                    ""id"": ""ad13ddca-9114-4560-b93a-8850f8745394"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0c39dab6-faab-4015-b426-2fcf89f303bb"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8b2ef2e5-c244-4706-b302-135caa5a39bd"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""61e989f9-861c-4baf-872b-f799df1aef5b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4302ada3-32cb-4f3b-a9ee-8016a975274a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""59676708-91bc-4172-a002-64689aeec18b"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerConfirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c9e38c2-4c77-45b7-b241-ad1f259ec3c6"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerCancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DebugConsole"",
            ""id"": ""b520142b-8f20-490a-b4f9-6b3a3d95d181"",
            ""actions"": [
                {
                    ""name"": ""ToggleDebug"",
                    ""type"": ""Button"",
                    ""id"": ""ac9746b8-38d2-402c-af41-caa65062836d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ff1b97f2-570a-4ae0-9ca4-45ac831695b3"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleDebug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MapNavi
        m_MapNavi = asset.FindActionMap("MapNavi", throwIfNotFound: true);
        m_MapNavi_CursorMove = m_MapNavi.FindAction("CursorMove", throwIfNotFound: true);
        m_MapNavi_CursorConfirm = m_MapNavi.FindAction("CursorConfirm", throwIfNotFound: true);
        m_MapNavi_CursorCancel = m_MapNavi.FindAction("CursorCancel", throwIfNotFound: true);
        // MenuNavi
        m_MenuNavi = asset.FindActionMap("MenuNavi", throwIfNotFound: true);
        m_MenuNavi_PointerMove = m_MenuNavi.FindAction("PointerMove", throwIfNotFound: true);
        m_MenuNavi_PointerConfirm = m_MenuNavi.FindAction("PointerConfirm", throwIfNotFound: true);
        m_MenuNavi_PointerCancel = m_MenuNavi.FindAction("PointerCancel", throwIfNotFound: true);
        // DebugConsole
        m_DebugConsole = asset.FindActionMap("DebugConsole", throwIfNotFound: true);
        m_DebugConsole_ToggleDebug = m_DebugConsole.FindAction("ToggleDebug", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MapNavi
    private readonly InputActionMap m_MapNavi;
    private IMapNaviActions m_MapNaviActionsCallbackInterface;
    private readonly InputAction m_MapNavi_CursorMove;
    private readonly InputAction m_MapNavi_CursorConfirm;
    private readonly InputAction m_MapNavi_CursorCancel;
    public struct MapNaviActions
    {
        private @GameInput m_Wrapper;
        public MapNaviActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CursorMove => m_Wrapper.m_MapNavi_CursorMove;
        public InputAction @CursorConfirm => m_Wrapper.m_MapNavi_CursorConfirm;
        public InputAction @CursorCancel => m_Wrapper.m_MapNavi_CursorCancel;
        public InputActionMap Get() { return m_Wrapper.m_MapNavi; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapNaviActions set) { return set.Get(); }
        public void SetCallbacks(IMapNaviActions instance)
        {
            if (m_Wrapper.m_MapNaviActionsCallbackInterface != null)
            {
                @CursorMove.started -= m_Wrapper.m_MapNaviActionsCallbackInterface.OnCursorMove;
                @CursorMove.performed -= m_Wrapper.m_MapNaviActionsCallbackInterface.OnCursorMove;
                @CursorMove.canceled -= m_Wrapper.m_MapNaviActionsCallbackInterface.OnCursorMove;
                @CursorConfirm.started -= m_Wrapper.m_MapNaviActionsCallbackInterface.OnCursorConfirm;
                @CursorConfirm.performed -= m_Wrapper.m_MapNaviActionsCallbackInterface.OnCursorConfirm;
                @CursorConfirm.canceled -= m_Wrapper.m_MapNaviActionsCallbackInterface.OnCursorConfirm;
                @CursorCancel.started -= m_Wrapper.m_MapNaviActionsCallbackInterface.OnCursorCancel;
                @CursorCancel.performed -= m_Wrapper.m_MapNaviActionsCallbackInterface.OnCursorCancel;
                @CursorCancel.canceled -= m_Wrapper.m_MapNaviActionsCallbackInterface.OnCursorCancel;
            }
            m_Wrapper.m_MapNaviActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CursorMove.started += instance.OnCursorMove;
                @CursorMove.performed += instance.OnCursorMove;
                @CursorMove.canceled += instance.OnCursorMove;
                @CursorConfirm.started += instance.OnCursorConfirm;
                @CursorConfirm.performed += instance.OnCursorConfirm;
                @CursorConfirm.canceled += instance.OnCursorConfirm;
                @CursorCancel.started += instance.OnCursorCancel;
                @CursorCancel.performed += instance.OnCursorCancel;
                @CursorCancel.canceled += instance.OnCursorCancel;
            }
        }
    }
    public MapNaviActions @MapNavi => new MapNaviActions(this);

    // MenuNavi
    private readonly InputActionMap m_MenuNavi;
    private IMenuNaviActions m_MenuNaviActionsCallbackInterface;
    private readonly InputAction m_MenuNavi_PointerMove;
    private readonly InputAction m_MenuNavi_PointerConfirm;
    private readonly InputAction m_MenuNavi_PointerCancel;
    public struct MenuNaviActions
    {
        private @GameInput m_Wrapper;
        public MenuNaviActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerMove => m_Wrapper.m_MenuNavi_PointerMove;
        public InputAction @PointerConfirm => m_Wrapper.m_MenuNavi_PointerConfirm;
        public InputAction @PointerCancel => m_Wrapper.m_MenuNavi_PointerCancel;
        public InputActionMap Get() { return m_Wrapper.m_MenuNavi; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuNaviActions set) { return set.Get(); }
        public void SetCallbacks(IMenuNaviActions instance)
        {
            if (m_Wrapper.m_MenuNaviActionsCallbackInterface != null)
            {
                @PointerMove.started -= m_Wrapper.m_MenuNaviActionsCallbackInterface.OnPointerMove;
                @PointerMove.performed -= m_Wrapper.m_MenuNaviActionsCallbackInterface.OnPointerMove;
                @PointerMove.canceled -= m_Wrapper.m_MenuNaviActionsCallbackInterface.OnPointerMove;
                @PointerConfirm.started -= m_Wrapper.m_MenuNaviActionsCallbackInterface.OnPointerConfirm;
                @PointerConfirm.performed -= m_Wrapper.m_MenuNaviActionsCallbackInterface.OnPointerConfirm;
                @PointerConfirm.canceled -= m_Wrapper.m_MenuNaviActionsCallbackInterface.OnPointerConfirm;
                @PointerCancel.started -= m_Wrapper.m_MenuNaviActionsCallbackInterface.OnPointerCancel;
                @PointerCancel.performed -= m_Wrapper.m_MenuNaviActionsCallbackInterface.OnPointerCancel;
                @PointerCancel.canceled -= m_Wrapper.m_MenuNaviActionsCallbackInterface.OnPointerCancel;
            }
            m_Wrapper.m_MenuNaviActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PointerMove.started += instance.OnPointerMove;
                @PointerMove.performed += instance.OnPointerMove;
                @PointerMove.canceled += instance.OnPointerMove;
                @PointerConfirm.started += instance.OnPointerConfirm;
                @PointerConfirm.performed += instance.OnPointerConfirm;
                @PointerConfirm.canceled += instance.OnPointerConfirm;
                @PointerCancel.started += instance.OnPointerCancel;
                @PointerCancel.performed += instance.OnPointerCancel;
                @PointerCancel.canceled += instance.OnPointerCancel;
            }
        }
    }
    public MenuNaviActions @MenuNavi => new MenuNaviActions(this);

    // DebugConsole
    private readonly InputActionMap m_DebugConsole;
    private IDebugConsoleActions m_DebugConsoleActionsCallbackInterface;
    private readonly InputAction m_DebugConsole_ToggleDebug;
    public struct DebugConsoleActions
    {
        private @GameInput m_Wrapper;
        public DebugConsoleActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleDebug => m_Wrapper.m_DebugConsole_ToggleDebug;
        public InputActionMap Get() { return m_Wrapper.m_DebugConsole; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugConsoleActions set) { return set.Get(); }
        public void SetCallbacks(IDebugConsoleActions instance)
        {
            if (m_Wrapper.m_DebugConsoleActionsCallbackInterface != null)
            {
                @ToggleDebug.started -= m_Wrapper.m_DebugConsoleActionsCallbackInterface.OnToggleDebug;
                @ToggleDebug.performed -= m_Wrapper.m_DebugConsoleActionsCallbackInterface.OnToggleDebug;
                @ToggleDebug.canceled -= m_Wrapper.m_DebugConsoleActionsCallbackInterface.OnToggleDebug;
            }
            m_Wrapper.m_DebugConsoleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleDebug.started += instance.OnToggleDebug;
                @ToggleDebug.performed += instance.OnToggleDebug;
                @ToggleDebug.canceled += instance.OnToggleDebug;
            }
        }
    }
    public DebugConsoleActions @DebugConsole => new DebugConsoleActions(this);
    public interface IMapNaviActions
    {
        void OnCursorMove(InputAction.CallbackContext context);
        void OnCursorConfirm(InputAction.CallbackContext context);
        void OnCursorCancel(InputAction.CallbackContext context);
    }
    public interface IMenuNaviActions
    {
        void OnPointerMove(InputAction.CallbackContext context);
        void OnPointerConfirm(InputAction.CallbackContext context);
        void OnPointerCancel(InputAction.CallbackContext context);
    }
    public interface IDebugConsoleActions
    {
        void OnToggleDebug(InputAction.CallbackContext context);
    }
}
